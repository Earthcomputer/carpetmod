--- ../src-base/minecraft/net/minecraft/block/BlockBeacon.java
+++ ../src-work/minecraft/net/minecraft/block/BlockBeacon.java
@@ -1,5 +1,8 @@
 package net.minecraft.block;
 
+import carpet.commands.CommandLoadedChunks;
+import it.unimi.dsi.fastutil.HashCommon;
+import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
 import net.minecraft.block.material.MapColor;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
@@ -16,10 +19,15 @@
 import net.minecraft.util.EnumHand;
 import net.minecraft.util.HttpUtil;
 import net.minecraft.util.math.BlockPos;
+import net.minecraft.util.math.ChunkPos;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldServer;
 import net.minecraft.world.chunk.Chunk;
 
+import carpet.CarpetSettings;
+import net.minecraft.world.gen.ChunkProviderServer;
+import test.Test;
+
 public class BlockBeacon extends BlockContainer
 {
     public BlockBeacon()
@@ -93,17 +101,34 @@
             ((TileEntityBeacon)tileentity).func_174908_m();
             p_189540_2_.func_175641_c(p_189540_3_, this, 1, 0);
         }
+
+        if (CarpetSettings.asyncBeaconUpdates && p_189540_2_.func_175640_z(p_189540_3_))
+        {
+            HttpUtil.field_180193_a.submit(() -> p_189540_2_.func_175722_b(p_189540_3_, this, true));
+        }
     }
 
     public static void func_176450_d(final World p_176450_0_, final BlockPos p_176450_1_)
     {
+        Test.isBeaconTick = true;
+        Test.profileResults.put("thread_scheduled", System.nanoTime());
         HttpUtil.field_180193_a.submit(new Runnable()
         {
             public void run()
             {
+                Test.profileResults.put("beacon_start", System.nanoTime());
+                Object[] values;
+                int mask;
+                try {
+                    values = CommandLoadedChunks.getValues((Long2ObjectOpenHashMap) ((ChunkProviderServer) p_176450_0_.func_72863_F()).field_73244_f).clone();
+                    mask = CommandLoadedChunks.getMask((Long2ObjectOpenHashMap) ((ChunkProviderServer) p_176450_0_.func_72863_F()).field_73244_f);
+                } catch (Exception e) {
+                    return;
+                }
                 Chunk chunk = p_176450_0_.func_175726_f(p_176450_1_);
 
-                for (int i = p_176450_1_.func_177956_o() - 1; i >= 0; --i)
+                int i;
+                for (i = p_176450_1_.func_177956_o() - 1; i >= 0; --i)
                 {
                     final BlockPos blockpos = new BlockPos(p_176450_1_.func_177958_n(), i, p_176450_1_.func_177952_p());
 
@@ -131,7 +156,17 @@
                         });
                     }
                 }
+                Test.profileResults.put("beacon_end", System.nanoTime());
+                int index = (int) HashCommon.mix(ChunkPos.func_77272_a(p_176450_1_.func_177958_n() >> 4, p_176450_1_.func_177952_p() >> 4)) & mask;
+                System.out.println(index);
+                while (values[index] != null) {
+                    Chunk c = (Chunk) values[index];
+                    System.out.println("- " + c.field_76635_g + ", " + c.field_76647_h);
+                    index = (index + 1) & mask;
+                }
+                System.out.println(p_176450_1_.func_177956_o() - i);
             }
         });
+        Test.profileResults.put("thread_scheduling_done", System.nanoTime());
     }
 }
